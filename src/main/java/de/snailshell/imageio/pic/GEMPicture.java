package de.snailshell.imageio.pic;import javax.imageio.stream.ImageInputStream;import java.awt.*;import java.awt.image.BufferedImage;import java.awt.image.MemoryImageSource;import java.io.IOException;public class GEMPicture {    static final int FILE_LENGTH_BYTES = 32000;    static final int WIDTH = 640;    static final int HEIGHT = 400;    private static final int BLACK = 0xff000000;    private static final int WHITE = 0xffffffff;    BufferedImage decode(ImageInputStream inputStream) throws IOException {        int pix[] = new int[WIDTH * HEIGHT];        int offs = 0;        for (int i = 0; i < FILE_LENGTH_BYTES; i++) {            int bits = inputStream.read();            int mask = 128;            while (mask > 0) {                if ((bits & mask) > 0) {                    pix[offs++] = BLACK;                } else {                    pix[offs++] = WHITE;                }                mask >>= 1;            }        }        return bufferedImageFrom(pix);    }    private BufferedImage bufferedImageFrom(int[] pix) {        var memoryImageSource = new MemoryImageSource(WIDTH, HEIGHT, pix, 0, WIDTH);        var image = Toolkit.getDefaultToolkit().createImage(memoryImageSource);        var bufferedImage = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_BYTE_BINARY);        bufferedImage.getGraphics().drawImage(image, 0, 0, null);        return bufferedImage;    }}