package de.snailshell.imageio.img;import java.applet.Applet;import java.awt.*;import java.awt.image.MemoryImageSource;import java.io.BufferedInputStream;import java.net.URL;public class GEMImage extends Applet {    String filename;    BufferedInputStream stream;    Image img;    Dimension d;    int version, headlen, planes,            pat_run, sl_width, sl_height,            pix[];    static final int Schwarz = 0xff000000;    static final int Weiss = 0xffffffff;    static final int MAX_PATTERNS = 8;    public void init() {        int i, zeile, vrc, l_buflen, bytecols, wert, len, line_ptr,                dst, cnt, rast_ptr, max_pat, pattern[] = new int[MAX_PATTERNS];        filename = getParameter("file");        try {            stream = new BufferedInputStream(new URL(getDocumentBase(), filename).openStream());            version = stream.read() * 256 + stream.read();            headlen = stream.read() * 256 + stream.read();            planes = stream.read() * 256 + stream.read();            if ((version != 1) || (headlen < 8) || (planes != 1)) return;            pat_run = stream.read() * 256 + stream.read();            stream.skip(4);            sl_width = stream.read() * 256 + stream.read();            sl_height = stream.read() * 256 + stream.read();            if (headlen > 8) stream.skip(headlen * 2 - 16);            pix = new int[sl_width * sl_height];            l_buflen = (sl_width + 7) >> 3;            max_pat = (pat_run < MAX_PATTERNS) ? pat_run : MAX_PATTERNS;            zeile = 0;            dst = 0;            while (zeile < sl_height) {                vrc = 1;                bytecols = l_buflen;                line_ptr = dst;                while (bytecols > 0) {                    wert = stream.read();                    switch (wert) {                        case 0:                            wert = stream.read();                            if (wert == 0) {                                wert = stream.read();                                if (wert == 0xff) vrc = stream.read();                            } else {                                bytecols -= wert * pat_run;                                for (i = 0; i < max_pat; i++) pattern[i] = stream.read();                                while (wert > 0) {                                    for (i = 0; i < max_pat; i++) {                                        byte2pix(pattern[i], line_ptr);                                        line_ptr += 8;                                    }                                    wert--;                                }                            }                            break;                        case 0x80:                            wert = stream.read();                            bytecols -= wert;                            while (wert > 0) {                                byte2pix(stream.read(), line_ptr);                                line_ptr += 8;                                wert--;                            }                            break;                        default:                            len = wert & 0x7f;                            if (len > 0) {                                bytecols -= len;                                wert = ((wert & 0x80) > 0) ? Schwarz : Weiss;                                for (i = 0; i < (8 * len); i++) pix[line_ptr++] = wert;                            }                            break;                    }                }                if (vrc > 1) {                    for (cnt = 1; cnt < vrc; cnt++) {                        line_ptr = dst;                        rast_ptr = dst + cnt * sl_width;                        for (i = 0; i < sl_width; i++) pix[rast_ptr++] = pix[line_ptr++];                    }                }                dst += vrc * sl_width;                zeile += vrc;            }            stream = null;            img = createImage(new MemoryImageSource(sl_width, sl_height, pix, 0, sl_width));            pix = null;        } catch (Exception e) {        }    }    public void byte2pix(int bits, int offs) {        int mask = 128;        while (mask > 0) {            if ((bits & mask) > 0) {                pix[offs++] = Schwarz;            } else {                pix[offs++] = Weiss;            }            mask >>= 1;        }    }    public void paint(Graphics g) {        d = size();        g.drawImage(img, 0, 0, d.width - 1, d.height - 1, null);    }    public String[][] getParameterInfo() {        String[][] info = {                {"file", "non-empty string", "The filename of a monochrome GEM image file (*.IMG)."}        };        return info;    }    public String getAppletInfo() {        return "GEMImage by Thomas_Much@ka2.maus.de (26.08.1996)";    }}